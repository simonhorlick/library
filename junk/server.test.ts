// // import { ApolloServer } from "@apollo/server";
// import { afterAll, beforeAll, describe, expect, it } from "vitest";
// import { createApolloServer } from "./server";
// import request from "supertest";
// // import * as schema from "./schema";
// import { Pool } from "pg";
// import { readFileSync } from "fs";
// import Fastify from "fastify";

// describe("e2e demo", () => {
//   let url: string;

//   // before the tests we spin up a new Apollo Server
//   beforeAll(async () => {
//     const pool = new Pool({
//       database: "library",
//       user: process.env.DB_USER,
//       password: process.env.DB_PASSWORD,
//       host: process.env.DB_HOST,
//       port: Number.parseInt(process.env.DB_PORT || "5432"),
//     });

//     // // Note we must wrap our object destructuring in parentheses because we already declared these variables
//     // // We pass in the port as 0 to let the server pick its own ephemeral port for testing
//     url = await createApolloServer(0);

//     console.log(`started server`);
//   });

//   // after the tests we'll stop the server
//   afterAll(async () => {
//     // await server.stop();
//   });

//   const registerUserMutation = `
// mutation RegisterUser($email: String!, $username: String!) {
//   registerUser(input:  {
//      email: $email,
//      username: $username
//   }) {
//     result {
//       __typename
//       ... on EmailAddressConflict {
//         message
//       }
//       ... on CreatedUser {
//         email
//         createdAt
//       }
//     }
//   }
// }`;

//   it("should register a user", async () => {
//     const sub = Math.floor(1_000_000 * Math.random()).toString();
//     // send our request to the url of the test server
//     const response = await request(url)
//       .post("/graphql")
//       .send({
//         query: registerUserMutation,
//         variables: {
//           email: `ok+${sub}@example.com`,
//           username: sub,
//         },
//       });
//     console.log(JSON.stringify(response.body, null, 2));
//     expect(response.body.errors).toBeUndefined();
//     expect(response.body.data).toEqual({
//       registerUser: {
//         result: {
//           __typename: "User",
//           email: `ok+${sub}@example.com`,
//           createdAt: expect.any(String),
//         },
//       },
//     });
//   });

//   //
//   // This approach using grafast is a total mess. We should just use apollo
//   // or something normal.
//   // Create mutations manually using apollo and stitch them together with the
//   // autogenerated schema?
//   //
//   it("should fail if the username is too long", async () => {
//     const sub =
//       "0000000000" +
//       "0000000000" +
//       "0000000000" +
//       "0000000000" +
//       "0000000000" +
//       Math.floor(1_000_000 * Math.random()).toString();
//     // send our request to the url of the test server
//     const response = await request(url)
//       .post("/graphql")
//       .send({
//         query: registerUserMutation,
//         variables: {
//           email: `ok+${sub}@example.com`,
//           username: sub,
//         },
//       });
//     console.log(JSON.stringify(response.body, null, 2));
//     expect(response.body.errors).toBeUndefined();
//     expect(response.body.data).toEqual({
//       registerUser: {
//         result: {
//           __typename: "User",
//           email: `ok+${sub}@example.com`,
//           createdAt: expect.any(String),
//         },
//       },
//     });
//   });

//   //   const createUserMutation = `
//   // mutation NewUser($email: String!, $username: String!) {
//   //   createUser(input:  {
//   //      user:  {
//   //         email: $email,
//   //         username: $username
//   //      }
//   //   }) {
//   //     user {
//   //       email
//   //       createdAt
//   //     }
//   //   }
//   // }`;

//   //   it("should create a user", async () => {
//   //     const sub = Math.floor(1_000_000 * Math.random()).toString();
//   //     // send our request to the url of the test server
//   //     const response = await request(url)
//   //       .post("/graphql")
//   //       .send({
//   //         query: createUserMutation,
//   //         variables: {
//   //           email: `ok+${sub}@example.com`,
//   //           username: sub,
//   //         },
//   //       });
//   //     console.log(JSON.stringify(response.body, null, 2));
//   //     expect(response.body.errors).toBeUndefined();
//   //     expect(response.body.data).toEqual({
//   //       createUser: {
//   //         user: {
//   //           email: `ok+${sub}@example.com`,
//   //           createdAt: expect.any(String),
//   //         },
//   //       },
//   //     });
//   //   });

//   it("should return an error if a user with an existing email already exists", async () => {
//     const sub = Math.floor(1_000_000 * Math.random()).toString();
//     // send our request to the url of the test server
//     const response = await request(url)
//       .post("/graphql")
//       .send({
//         query: registerUserMutation,
//         variables: {
//           email: `ok@example.com`,
//           username: sub,
//         },
//       });
//     expect(response.body.errors).toBeUndefined();
//     expect(response.body.data).toEqual({
//       registerUser: {
//         result: {
//           __typename: "EmailAddressConflict",
//           message: `The email address 'ok@example.com' is already in use`,
//         },
//       },
//     });
//   });

//   const listBooksQuery = `
// query Book {
//   books(condition: {title: "Anna Karenina"}) {
//     nodes {
//       isbn
//       title
//     }
//   }
// }  `;

//   it("should return a list of books", async () => {
//     // send our request to the url of the test server
//     const response = await request(url)
//       .post("/graphql")
//       .send({ query: listBooksQuery });
//     expect((response as any).errors).toBeUndefined();
//     expect(response.body.data).toEqual({
//       books: {
//         nodes: [
//           {
//             isbn: "9780140449174",
//             title: "Anna Karenina",
//           },
//           {
//             isbn: "9780486437965",
//             title: "Anna Karenina",
//           },
//           {
//             isbn: "9780809596812",
//             title: "Anna Karenina",
//           },
//         ],
//       },
//     });
//   });
// });
